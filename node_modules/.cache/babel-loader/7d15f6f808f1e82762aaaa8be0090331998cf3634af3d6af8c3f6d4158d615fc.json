{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      path: '',\n      dialogFormVisible: false,\n      flag1: false,\n      flag2: false,\n      billType: {\n        billType: ''\n      },\n      customer: {\n        customer: '',\n        customerType: ''\n      },\n      customerTypes: [],\n      billTypes: [],\n      customers: []\n    };\n  },\n  name: 'categoryView',\n  computed: {\n    addCustomerBt() {\n      return this.customer.customer === '' || this.customer.customerType === '';\n    }\n    // editPathBt(){\n    //     return this.path === ''\n    // }\n  },\n\n  created() {\n    this.billsInit();\n    this.costumersInit();\n    this.customerTypesInit();\n  },\n  methods: {\n    // \n    changeTab(tab) {\n      this.currentTab = tab;\n      const path = `/home/${tab.toLowerCase()}`;\n      this.$router.push({\n        path\n      });\n    },\n    // \n    // editPath(){\n\n    // },\n    costumersInit() {\n      this.$http.get('/category/getCustomers').then(res => {\n        this.customers = res.data.data;\n      });\n    },\n    customerTypesInit() {\n      this.$http.get('/category/getCustomerTypes').then(res => {\n        this.customerTypes = res.data.data;\n      });\n    },\n    customerBlur() {\n      if (this.customer.customer === '') {\n        this.flag1 = true;\n      } else {\n        this.flag1 = false;\n      }\n    },\n    deleteCustomer(customerno) {\n      this.$confirm('これで取引先は完全に削除されます，続きますが？', '取引先を消しますが？', {\n        confirmButtonText: '続く',\n        cancelButtonText: 'キャンセル',\n        type: 'warning'\n      }).then(() => {\n        this.$http.get('/category/deleteCustomer/' + customerno).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              type: 'success',\n              message: '削除成功'\n            });\n            this.customerInit();\n          }\n        });\n      }).catch(() => {});\n    },\n    addCustomer() {\n      let flag1 = false;\n      this.customerTypes.forEach(customer => {\n        if (this.customer.customerType === customer.customerType) {\n          flag1 = true;\n        }\n      });\n      if (!flag1) {\n        this.$confirm('入力した取引先は今のない取引先です。', '取引先を新規しますか？', {\n          confirmButtonText: '新規',\n          cancelButtonText: 'キャンセル',\n          type: 'warning'\n        }).then(() => {\n          this.addCustomerSend();\n        });\n      } else {\n        this.addCustomerSend();\n      }\n    },\n    addCustomerSend() {\n      const requestData = {\n        customer: this.customer,\n        updateuserid: sessionStorage.getItem('userid')\n      };\n      this.$http.post('/category/addCustomer', requestData).then(res => {\n        if (res.data.code === 200) {\n          this.$message({\n            type: 'success',\n            message: '新規成功'\n          });\n          this.costomersInit();\n          this.costomerInit();\n        }\n      });\n      // \n      // \n      // this.$http.post('/category/addCustomer', this.customer)\n      //     .then(res => {\n      //         if (res.data.code === 200) {\n      //             this.$message({\n      //                 type: 'success',\n      //                 message: '新規成功'\n      //             });\n      //             this.costomersInit()\n      //             this.costomerInit()\n      //         }\n      //     })\n      this.dialogFormVisible = false;\n    },\n    deleteBillType(billTypeno) {\n      this.$confirm('これで帳票種類は完全に削除されます，続きますが？', '帳票種類を消しますが？', {\n        confirmButtonText: '続く',\n        cancelButtonText: 'キャンセル',\n        type: 'warning'\n      }).then(() => {\n        this.$http.get('/category/deleteBillType/' + billTypeno).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              type: 'success',\n              message: '削除成功'\n            });\n            this.billsInit();\n          }\n        });\n      }).catch(() => {});\n    },\n    addBillType() {\n      this.$prompt('帳票種類を入力ください', '帳票種類新規', {\n        confirmButtonText: '追加',\n        cancelButtonText: 'キャンセル'\n      }).then(({\n        value\n      }) => {\n        if (value == null || value === '') {\n          this.$message({\n            type: 'warning',\n            message: '帳票種類を入力ください'\n          });\n          return;\n        }\n        const requestData = {\n          updateuserid: sessionStorage.getItem('userid'),\n          billTypeValue: value // 你需要将帳票種類的值传递给后端，你可以根据实际情况调整参数名\n        };\n\n        this.$http.post('/category/addBillType', requestData).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              type: 'success',\n              message: '新規成功'\n            });\n            this.billsInit();\n          }\n        });\n\n        // this.$http.get('/category/addBillType/' + value)\n        //     .then(res => {\n        //         if (res.data.code === 200) {\n        //             this.$message({\n        //                 type: 'success',\n        //                 message: '新規成功'\n        //             });\n        //             this.billsInit()\n        //         }\n        //     })\n      }).catch(() => {});\n    },\n    handleFolderChange(e) {\n      const path = e.target.files[0].path;\n      this.path = path;\n    },\n    triggerFileInput() {\n      this.$refs.fileInput.click();\n    },\n    billsInit() {\n      this.$http.get('/category/getBillTypes').then(res => {\n        this.billTypes = res.data.data;\n      });\n    },\n    costomersInit() {\n      this.$http.get('/category/getCustomers').then(res => {\n        this.customers = res.data.data;\n      });\n    },\n    customerInit() {\n      this.customer.customer = '', this.customer.customerType = '';\n    }\n  }\n};","map":{"version":3,"names":["data","path","dialogFormVisible","flag1","flag2","billType","customer","customerType","customerTypes","billTypes","customers","name","computed","addCustomerBt","created","billsInit","costumersInit","customerTypesInit","methods","changeTab","tab","currentTab","toLowerCase","$router","push","$http","get","then","res","customerBlur","deleteCustomer","customerno","$confirm","confirmButtonText","cancelButtonText","type","code","$message","message","customerInit","catch","addCustomer","forEach","addCustomerSend","requestData","updateuserid","sessionStorage","getItem","post","costomersInit","costomerInit","deleteBillType","billTypeno","addBillType","$prompt","value","billTypeValue","handleFolderChange","e","target","files","triggerFileInput","$refs","fileInput","click"],"sources":["src/views/category.vue"],"sourcesContent":["<template>\r\n   \r\n\r\n   <div>\r\n    <el-menu>\r\n      <el-menu-item @click=\"changeTab('billType')\" :class=\"{ 'is-active': currentTab === 'billType' }\">\r\n        帳票種類\r\n      </el-menu-item>\r\n      <el-menu-item @click=\"changeTab('customer')\" :class=\"{ 'is-active': currentTab === 'customer' }\">\r\n        取引先\r\n      </el-menu-item>\r\n    </el-menu>\r\n\r\n    <div v-if=\"currentTab === 'billType'\">\r\n        <el-card class=\"box-card\">\r\n                <div slot=\"header\" class=\"clearfix\">\r\n                    <span>帳票種類</span>\r\n                    <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"addBillType\">新規</el-button>\r\n                </div>\r\n                <div v-for=\"billType in billTypes\" :key=\"billType.billTypeno\" class=\"text item d-flex \"\r\n                    style=\"justify-content: space-between\">\r\n                    <div>{{billType.billType}}</div>\r\n                    <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\"\r\n                        @click=\"deleteBillType(billType.billTypeno)\">削除</el-button>\r\n                </div>\r\n            </el-card>\r\n    </div>\r\n\r\n    <div v-if=\"currentTab === 'customer'\">\r\n        <el-card class=\"box-card\">\r\n                <div slot=\"header\" class=\"clearfix\">\r\n                    <span>取引先</span>\r\n                    <el-button style=\"float: right; padding: 3px 0\" type=\"text\"\r\n                        @click=\"dialogFormVisible= true\">新規</el-button>\r\n                    <el-dialog title=\"取引先新規\" :visible.sync=\"dialogFormVisible\" @closed=\"customerInit\">\r\n                        <el-form :model=\"customer\">\r\n                            <el-form-item label=\"取引先\">\r\n                                <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag1\">取引先を入力してください</span>\r\n                                <el-input v-model=\"customer.customer\" autocomplete=\"off\"\r\n                                    @blur=\"customerBlur\"></el-input>\r\n                            </el-form-item>\r\n                            <el-form-item label=\"取引先種類\">\r\n                                <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag2\">取引先種類を入力してください</span>\r\n                                <el-select v-model=\"customer.customerType\" filterable allow-create default-first-option\r\n                                    class=\"w-100\" placeholder=\"取引先種類を選択してください\">\r\n                                    <el-option v-for=\"customerType in customerTypes\" :key=\"customerType.customerType\"\r\n                                        :label=\"customerType.customerType\" :value=\"customerType.customerType\">\r\n                                    </el-option>\r\n                                </el-select>\r\n                            </el-form-item>\r\n                        </el-form>\r\n                        <div slot=\"footer\" class=\"dialog-footer\">\r\n                            <el-button @click=\"dialogFormVisible = false\">キャンセル</el-button>\r\n                            <el-button type=\"primary\" @click=\"addCustomer\" :disabled=\"addCustomerBt\">追 加</el-button>\r\n                        </div>\r\n                    </el-dialog>\r\n                </div>\r\n                <div v-for=\"customer in customers\" :key=\"customer.customerno\" class=\"text item d-flex \"\r\n                    style=\"justify-content: space-between\">\r\n                    <div style=\"width: 120px;\">{{customer.customer}}</div>\r\n                    <div>{{customer.customerType}}</div>\r\n                    <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\"\r\n                        @click=\"deleteCustomer(customer.customerno)\">削除</el-button>\r\n                </div>\r\n            </el-card> \r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                path: '',\r\n                dialogFormVisible: false,\r\n                flag1: false,\r\n                flag2: false,\r\n                billType: {\r\n                    billType: ''\r\n                },\r\n                customer: {\r\n                    customer: '',\r\n                    customerType: ''\r\n                },\r\n                customerTypes: [],\r\n                billTypes: [],\r\n                customers: []\r\n            }\r\n        },\r\n        name: 'categoryView',\r\n        computed: {\r\n            addCustomerBt() {\r\n                return this.customer.customer === '' || this.customer.customerType === ''\r\n            },\r\n            // editPathBt(){\r\n            //     return this.path === ''\r\n            // }\r\n        },\r\n        created() {\r\n            this.billsInit()\r\n            this.costumersInit()\r\n            this.customerTypesInit()\r\n        },\r\n        methods: {\r\n            // \r\n            changeTab(tab) {\r\n                    this.currentTab = tab;\r\n                    const path = `/home/${tab.toLowerCase()}`;\r\n                    this.$router.push({ path });\r\n                },\r\n            // \r\n            // editPath(){\r\n\r\n            // },\r\n            costumersInit() {\r\n                this.$http.get('/category/getCustomers')\r\n                    .then(res => {\r\n                        this.customers = res.data.data\r\n                    })\r\n            },\r\n            customerTypesInit() {\r\n                this.$http.get('/category/getCustomerTypes')\r\n                    .then(res => {\r\n                        this.customerTypes = res.data.data\r\n                    })\r\n            },\r\n            customerBlur() {\r\n                if (this.customer.customer === '') {\r\n                    this.flag1 = true\r\n                } else {\r\n                    this.flag1 = false\r\n                }\r\n            },\r\n            deleteCustomer(customerno) {\r\n                this.$confirm('これで取引先は完全に削除されます，続きますが？', '取引先を消しますが？', {\r\n                    confirmButtonText: '続く',\r\n                    cancelButtonText: 'キャンセル',\r\n                    type: 'warning'\r\n                }).then(() => {\r\n                    this.$http.get('/category/deleteCustomer/' + customerno)\r\n                        .then(res => {\r\n                            if (res.data.code === 200) {\r\n                                this.$message({\r\n                                    type: 'success',\r\n                                    message: '削除成功'\r\n                                });\r\n                                this.customerInit()\r\n                            }\r\n                        })\r\n                }).catch(() => { });\r\n            },\r\n\r\n            addCustomer() {\r\n                let flag1 = false;\r\n                this.customerTypes.forEach(customer => {\r\n                    if (this.customer.customerType === customer.customerType) {\r\n                        flag1 = true\r\n                    }\r\n                });\r\n                if (!flag1) {\r\n                    this.$confirm('入力した取引先は今のない取引先です。', '取引先を新規しますか？', {\r\n                        confirmButtonText: '新規',\r\n                        cancelButtonText: 'キャンセル',\r\n                        type: 'warning'\r\n                    }).then(() => {\r\n                        this.addCustomerSend()\r\n                    })\r\n                } else {\r\n                    this.addCustomerSend()\r\n                }\r\n            },\r\n\r\n            addCustomerSend() {\r\n                \r\n                const requestData = {\r\n                    customer: this.customer,\r\n                    updateuserid: sessionStorage.getItem('userid')\r\n                };\r\n                this.$http.post('/category/addCustomer', requestData)\r\n                    .then(res => {\r\n                        if (res.data.code === 200) {\r\n                            this.$message({\r\n                                type: 'success',\r\n                                message: '新規成功'\r\n                            });\r\n                            this.costomersInit();\r\n                            this.costomerInit();\r\n                        }\r\n                    });\r\n                // \r\n                // \r\n                // this.$http.post('/category/addCustomer', this.customer)\r\n                //     .then(res => {\r\n                //         if (res.data.code === 200) {\r\n                //             this.$message({\r\n                //                 type: 'success',\r\n                //                 message: '新規成功'\r\n                //             });\r\n                //             this.costomersInit()\r\n                //             this.costomerInit()\r\n                //         }\r\n                //     })\r\n                this.dialogFormVisible = false\r\n            },\r\n            deleteBillType(billTypeno) {\r\n                this.$confirm('これで帳票種類は完全に削除されます，続きますが？', '帳票種類を消しますが？', {\r\n                    confirmButtonText: '続く',\r\n                    cancelButtonText: 'キャンセル',\r\n                    type: 'warning'\r\n                }).then(() => {\r\n                    this.$http.get('/category/deleteBillType/' + billTypeno)\r\n                        .then(res => {\r\n                            if (res.data.code === 200) {\r\n                                this.$message({\r\n                                    type: 'success',\r\n                                    message: '削除成功'\r\n                                });\r\n                                this.billsInit()\r\n                            }\r\n                        })\r\n                }).catch(() => { });\r\n            },\r\n            addBillType() {\r\n                this.$prompt('帳票種類を入力ください', '帳票種類新規', {\r\n                    confirmButtonText: '追加',\r\n                    cancelButtonText: 'キャンセル',\r\n                }).then(({ value }) => {\r\n                    if (value == null || value === '') {\r\n                        this.$message({\r\n                            type: 'warning',\r\n                            message: '帳票種類を入力ください'\r\n                        });\r\n                        return\r\n                    }\r\n\r\n                    const requestData = {\r\n                        updateuserid: sessionStorage.getItem('userid'),\r\n                        billTypeValue: value  // 你需要将帳票種類的值传递给后端，你可以根据实际情况调整参数名\r\n                    };\r\n\r\n                    this.$http.post('/category/addBillType', requestData)\r\n                        .then(res => {\r\n                            if (res.data.code === 200) {\r\n                                this.$message({\r\n                                    type: 'success',\r\n                                    message: '新規成功'\r\n                                });\r\n                                this.billsInit();\r\n                            }\r\n                        });\r\n\r\n                    // this.$http.get('/category/addBillType/' + value)\r\n                    //     .then(res => {\r\n                    //         if (res.data.code === 200) {\r\n                    //             this.$message({\r\n                    //                 type: 'success',\r\n                    //                 message: '新規成功'\r\n                    //             });\r\n                    //             this.billsInit()\r\n                    //         }\r\n                    //     })\r\n                }).catch(() => { });\r\n            },\r\n            handleFolderChange(e) {\r\n                const path = e.target.files[0].path\r\n                this.path = path\r\n            },\r\n            triggerFileInput() {\r\n                this.$refs.fileInput.click();\r\n            },\r\n            billsInit() {\r\n                this.$http.get('/category/getBillTypes')\r\n                    .then(res => {\r\n                        this.billTypes = res.data.data\r\n                    })\r\n            },\r\n            costomersInit() {\r\n                this.$http.get('/category/getCustomers')\r\n                    .then(res => {\r\n                        this.customers = res.data.data\r\n                    })\r\n            },\r\n            customerInit() {\r\n                this.customer.customer = '',\r\n                    this.customer.customerType = ''\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n</script>\r\n\r\n<style scoped>\r\n    .text {\r\n        font-size: 14px;\r\n    }\r\n\r\n    .item {\r\n        margin-bottom: 18px;\r\n    }\r\n\r\n    .clearfix:before,\r\n    .clearfix:after {\r\n        display: table;\r\n        content: \"\";\r\n    }\r\n\r\n    .clearfix:after {\r\n        clear: both\r\n    }\r\n\r\n    .box-card {\r\n        width: 480px;\r\n    }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}