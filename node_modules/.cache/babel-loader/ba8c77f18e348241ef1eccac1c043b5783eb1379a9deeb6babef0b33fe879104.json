{"ast":null,"code":"export default {\n  data() {\n    return {\n      path: '',\n      dialogFormVisible: false,\n      flag1: false,\n      flag2: false,\n      billType: {\n        billType: ''\n      },\n      customer: {\n        customer: '',\n        customerType: ''\n      },\n      customerTypes: [],\n      billTypes: [],\n      customers: []\n    };\n  },\n  name: 'categoryView',\n  computed: {\n    addCustomerBt() {\n      return this.customer.customer === '' || this.customer.customerType === '';\n    }\n    // editPathBt(){\n    //     return this.path === ''\n    // }\n  },\n\n  created() {\n    this.billsInit();\n    this.costumersInit();\n    this.customerTypesInit();\n  },\n  methods: {\n    // editPath(){\n\n    // },\n    costumersInit() {\n      this.$http.get('/category/getCustomers').then(res => {\n        this.customers = res.data.data;\n      });\n    },\n    customerTypesInit() {\n      this.$http.get('/category/getCustomerTypes').then(res => {\n        this.customerTypes = res.data.data;\n      });\n    },\n    customerBlur() {\n      if (this.customer.customer === '') {\n        this.flag1 = true;\n      } else {\n        this.flag1 = false;\n      }\n    },\n    deleteCustomer(customerno) {\n      this.$confirm('これで取引先は完全に削除されます，続きますが？', '取引先を消しますが？', {\n        confirmButtonText: '続く',\n        cancelButtonText: 'キャンセル',\n        type: 'warning'\n      }).then(() => {\n        this.$http.get('/category/deleteCustomer/' + customerno).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              type: 'success',\n              message: '削除成功'\n            });\n            this.customerInit();\n          }\n        });\n      }).catch(() => {});\n    },\n    addCustomer() {\n      let flag1 = false;\n      this.customerTypes.forEach(customer => {\n        if (this.customer.customerType === customer.customerType) {\n          flag1 = true;\n        }\n      });\n      if (!flag1) {\n        this.$confirm('入力した取引先は今のない取引先です。', '取引先を新規しますか？', {\n          confirmButtonText: '新規',\n          cancelButtonText: 'キャンセル',\n          type: 'warning'\n        }).then(() => {\n          this.addCustomerSend();\n        });\n      } else {\n        this.addCustomerSend();\n      }\n    },\n    addCustomerSend() {\n      this.$http.post('/category/addCustomer', this.customer).then(res => {\n        if (res.data.code === 200) {\n          this.$message({\n            type: 'success',\n            message: '新規成功'\n          });\n          this.costomersInit();\n          this.costomerInit();\n        }\n      });\n      this.dialogFormVisible = false;\n    },\n    deleteBillType(billTypeno) {\n      this.$confirm('これで帳票種類は完全に削除されます，続きますが？', '帳票種類を消しますが？', {\n        confirmButtonText: '続く',\n        cancelButtonText: 'キャンセル',\n        type: 'warning'\n      }).then(() => {\n        this.$http.get('/category/deleteBillType/' + billTypeno).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              type: 'success',\n              message: '削除成功'\n            });\n            this.billsInit();\n          }\n        });\n      }).catch(() => {});\n    },\n    addBillType() {\n      this.$prompt('帳票種類を入力ください', '帳票種類新規', {\n        confirmButtonText: '追加',\n        cancelButtonText: 'キャンセル'\n      }).then(({\n        value\n      }) => {\n        if (value == null || value === '') {\n          this.$message({\n            type: 'warning',\n            message: '帳票種類を入力ください'\n          });\n          return;\n        }\n        this.$http.get('/category/addBillType/' + value).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              type: 'success',\n              message: '新規成功'\n            });\n            this.billsInit();\n          }\n        });\n      }).catch(() => {});\n    },\n    handleFolderChange(e) {\n      const path = e.target.files[0].path;\n      this.path = path;\n    },\n    triggerFileInput() {\n      this.$refs.fileInput.click();\n    },\n    billsInit() {\n      this.$http.get('/category/getBillTypes').then(res => {\n        this.billTypes = res.data.data;\n      });\n    },\n    costomersInit() {\n      this.$http.get('/category/getCustomers').then(res => {\n        this.customers = res.data.data;\n      });\n    },\n    customerInit() {\n      this.customer.customer = '', this.customer.customerType = '';\n    }\n  }\n};","map":{"version":3,"names":["data","path","dialogFormVisible","flag1","flag2","billType","customer","customerType","customerTypes","billTypes","customers","name","computed","addCustomerBt","created","billsInit","costumersInit","customerTypesInit","methods","$http","get","then","res","customerBlur","deleteCustomer","customerno","$confirm","confirmButtonText","cancelButtonText","type","code","$message","message","customerInit","catch","addCustomer","forEach","addCustomerSend","post","costomersInit","costomerInit","deleteBillType","billTypeno","addBillType","$prompt","value","handleFolderChange","e","target","files","triggerFileInput","$refs","fileInput","click"],"sources":["src/views/billStyle.vue"],"sourcesContent":["<template>\n    <el-card class=\"box-card\">\n        <div slot=\"header\" class=\"clearfix\">\n            <span>帳票種類</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"addBillType\">新規</el-button>\n        </div>\n        <div v-for=\"billType in billTypes\" :key=\"billType.billTypeno\" class=\"text item d-flex \"\n            style=\"justify-content: space-between\">\n            <div>{{billType.billType}}</div>\n            <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\"\n                @click=\"deleteBillType(billType.billTypeno)\">削除</el-button>\n        </div>\n    </el-card>\n</template>\n\n<script>\nexport default {\n    \n    data() {\n        return {\n            path: '',\n            dialogFormVisible: false,\n            flag1: false,\n            flag2: false,\n            billType: {\n                billType: ''\n            },\n            customer: {\n                customer: '',\n                customerType: ''\n            },\n            customerTypes: [],\n            billTypes: [],\n            customers: []\n        }\n    },\n    name: 'categoryView',\n    computed: {\n        addCustomerBt() {\n            return this.customer.customer === '' || this.customer.customerType === ''\n        },\n        // editPathBt(){\n        //     return this.path === ''\n        // }\n    },\n    created() {\n        this.billsInit()\n        this.costumersInit()\n        this.customerTypesInit()\n    },\n    methods: {\n        // editPath(){\n\n        // },\n        costumersInit() {\n            this.$http.get('/category/getCustomers')\n                .then(res => {\n                    this.customers = res.data.data\n                })\n        },\n        customerTypesInit() {\n            this.$http.get('/category/getCustomerTypes')\n                .then(res => {\n                    this.customerTypes = res.data.data\n                })\n        },\n        customerBlur() {\n            if (this.customer.customer === '') {\n                this.flag1 = true\n            } else {\n                this.flag1 = false\n            }\n        },\n        deleteCustomer(customerno) {\n            this.$confirm('これで取引先は完全に削除されます，続きますが？', '取引先を消しますが？', {\n                confirmButtonText: '続く',\n                cancelButtonText: 'キャンセル',\n                type: 'warning'\n            }).then(() => {\n                this.$http.get('/category/deleteCustomer/' + customerno)\n                    .then(res => {\n                        if (res.data.code === 200) {\n                            this.$message({\n                                type: 'success',\n                                message: '削除成功'\n                            });\n                            this.customerInit()\n                        }\n                    })\n            }).catch(() => { });\n        },\n\n        addCustomer() {\n            let flag1 = false;\n            this.customerTypes.forEach(customer => {\n                if (this.customer.customerType === customer.customerType) {\n                    flag1 = true\n                }\n            });\n            if (!flag1) {\n                this.$confirm('入力した取引先は今のない取引先です。', '取引先を新規しますか？', {\n                    confirmButtonText: '新規',\n                    cancelButtonText: 'キャンセル',\n                    type: 'warning'\n                }).then(() => {\n                    this.addCustomerSend()\n                })\n            } else {\n                this.addCustomerSend()\n            }\n        },\n        addCustomerSend() {\n            this.$http.post('/category/addCustomer', this.customer)\n                .then(res => {\n                    if (res.data.code === 200) {\n                        this.$message({\n                            type: 'success',\n                            message: '新規成功'\n                        });\n                        this.costomersInit()\n                        this.costomerInit()\n                    }\n                })\n            this.dialogFormVisible = false\n        },\n        deleteBillType(billTypeno) {\n            this.$confirm('これで帳票種類は完全に削除されます，続きますが？', '帳票種類を消しますが？', {\n                confirmButtonText: '続く',\n                cancelButtonText: 'キャンセル',\n                type: 'warning'\n            }).then(() => {\n                this.$http.get('/category/deleteBillType/' + billTypeno)\n                    .then(res => {\n                        if (res.data.code === 200) {\n                            this.$message({\n                                type: 'success',\n                                message: '削除成功'\n                            });\n                            this.billsInit()\n                        }\n                    })\n            }).catch(() => { });\n        },\n        addBillType() {\n            this.$prompt('帳票種類を入力ください', '帳票種類新規', {\n                confirmButtonText: '追加',\n                cancelButtonText: 'キャンセル',\n            }).then(({ value }) => {\n                if (value == null || value === '') {\n                    this.$message({\n                        type: 'warning',\n                        message: '帳票種類を入力ください'\n                    });\n                    return\n                }\n                this.$http.get('/category/addBillType/' + value)\n                    .then(res => {\n                        if (res.data.code === 200) {\n                            this.$message({\n                                type: 'success',\n                                message: '新規成功'\n                            });\n                            this.billsInit()\n                        }\n                    })\n            }).catch(() => { });\n        },\n        handleFolderChange(e) {\n            const path = e.target.files[0].path\n            this.path = path\n        },\n        triggerFileInput() {\n            this.$refs.fileInput.click();\n        },\n        billsInit() {\n            this.$http.get('/category/getBillTypes')\n                .then(res => {\n                    this.billTypes = res.data.data\n                })\n        },\n        costomersInit() {\n            this.$http.get('/category/getCustomers')\n                .then(res => {\n                    this.customers = res.data.data\n                })\n        },\n        customerInit() {\n            this.customer.customer = '',\n                this.customer.customerType = ''\n        }\n\n    }\n    \n}\n</script>\n\n<style>\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}