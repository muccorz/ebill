{"ast":null,"code":"export default {\n  name: 'rolesView',\n  data() {\n    return {\n      CreateUserVisible: false,\n      editUserVisible: false,\n      //ユーザー新規フォーム\n      user: {\n        userid: '',\n        username: '',\n        password: '',\n        rolesno: ''\n      },\n      formLabelWidth: '100px',\n      //サーバーから取得したユーザーデータ\n      users: [{\n        userid: '0001',\n        username: '田代 太郎',\n        rolesno: '1'\n      }, {\n        userid: '0002',\n        username: '毛賀 次郎',\n        rolesno: '2'\n      }, {\n        userid: '0003',\n        username: '埼玉 花子',\n        rolesno: '3'\n      }, {\n        userid: '0004',\n        username: '山田 三郎',\n        rolesno: '4'\n      }],\n      flag1: false,\n      flag2: false,\n      flag3: false,\n      flag4: false\n    };\n  },\n  computed: {\n    canLogin() {\n      return !this.flag1 && !this.flag2 && !this.flag3 && !this.flag4 && this.user.userid.length != 0 && this.user.username.length != 0 && this.user.password.length != 0 && this.user.rolesno.length != 0;\n    }\n  },\n  created() {\n    // this.init()\n  },\n  methods: {\n    // ユーザー編集，user对象的密码可能为空，如果为空就不update密码字段\n    editUser() {\n      // this.$http\n      //     .post(\"/user/editUser\", this.user)\n      //     .then(res => {\n      //         if (res.data.code == 200) {\n      //             this.editUserVisible = false;\n      //             this.$message({\n      //                 message: 'ユーザー編集成功',\n      //                 type: 'success'\n      //             });\n      //             this.init();\n      //         }\n      //     })\n      this.editUserVisible = false;\n      this.$message({\n        message: '編集成功',\n        type: 'success'\n      });\n    },\n    editUserbt(user) {\n      this.editUserVisible = true, this.user.userid = user.userid, this.user.username = user.username, this.user.rolesno = user.rolesno;\n    },\n    // ユーザー削除\n    deleteUser(user) {\n      this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // this.$http\n        //     .post(\"/user/deleteUser/\" + user.userid)\n        //     .then(res => {\n        //         if (res.data.code == 200) {\n        //             this.$message({\n        //                 message: '削除成功',\n        //                 type: 'success'\n        //             });\n        //             this.init()\n        //         }\n        //     })\n        this.$message({\n          message: '削除成功',\n          type: 'success'\n        });\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    // ユーザー新規\n    createUser() {\n      // this.$http\n      //     .post(\"/user/createUser\", this.user)\n      //     .then(res => {\n      //         if (res.data.code == 200) {\n      //             this.CreateUserVisible = false;\n      //             this.$message({\n      //                 message: 'ユーザー新規成功',\n      //                 type: 'success'\n      //             });\n      //             this.init();\n      //         }\n      //     })\n      this.CreateUserVisible = false;\n    },\n    // ユーザー権限のフォーマット\n    userFormatter(row) {\n      if (row.rolesno == 1) {\n        return '操作者';\n      } else if (row.rolesno == 2) {\n        return '閲覧者';\n      } else if (row.rolesno == 3) {\n        return '管理者';\n      } else if (row.rolesno == 4) {\n        return 'システム管理者';\n      }\n    },\n    // ユーザーIDのバリデーション\n    handUserid() {\n      if (this.user.userid == '') {\n        this.flag1 = true;\n      } else {\n        this.flag1 = false;\n      }\n      if (this.user.userid.length != 0 && !/^[0-9]+$/.test(this.user.userid)) {\n        this.flag3 = true;\n      } else {\n        this.flag3 = false;\n      }\n    },\n    // ユーザー名のバリデーション\n    handleUsername() {\n      if (this.user.username == '') {\n        this.flag4 = true;\n      } else {\n        this.flag4 = false;\n      }\n    },\n    // パスワードのバリデーション\n    handlePassword() {\n      if (this.user.password == '') {\n        this.flag2 = true;\n      } else {\n        this.flag2 = false;\n      }\n    },\n    //ユーザー一覧取得、初期化クリア\n    init() {\n      this.$http.post(\"/user/getUsers\").then(res => {\n        if (res.data.code == 200) {\n          this.users = res.data.data;\n        }\n      });\n      this.userInit();\n    },\n    userInit() {\n      this.user.userid = '', this.user.username = '', this.user.password = '', this.user.rolesno = '', this.flag1 = false, this.flag2 = false, this.flag3 = false, this.flag4 = false;\n    }\n  }\n};","map":{"version":3,"names":["name","data","CreateUserVisible","editUserVisible","user","userid","username","password","rolesno","formLabelWidth","users","flag1","flag2","flag3","flag4","computed","canLogin","length","created","methods","editUser","$message","message","type","editUserbt","deleteUser","$confirm","confirmButtonText","cancelButtonText","then","catch","createUser","userFormatter","row","handUserid","test","handleUsername","handlePassword","init","$http","post","res","code","userInit"],"sources":["src/views/roles.vue"],"sourcesContent":["<template>\r\n    <div style=\"text-align: left;\">\r\n        <div class=\"h4\" style=\"font-weight: 700;text-align:left\">権限管理</div>\r\n        <el-divider></el-divider>\r\n        <el-button type=\"primary\" class=\"mt-2 el-icon-edit\" @click=\"CreateUserVisible= true\">ユーザー新規</el-button>\r\n        <!-- ユーザー新規ダイアログ -->\r\n        <el-dialog title=\"ユーザー新規\" :visible.sync=\"CreateUserVisible\" :close-on-click-modal=\"false\" @closed=\"userInit\">\r\n            <el-form :model=\"user\">\r\n                <el-form-item label=\"ユーザーID\">\r\n                    <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag1\">ユーザーIDを入力してください</span>\r\n                    <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag3\">ユーザーIDは数字のみ</span>\r\n                    <el-input v-model=\"user.userid\" autocomplete=\"off\" placeholder=\"ユーザーIDを入力してください\"\r\n                        @blur=\"handUserid\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"ユーザー名\">\r\n                    <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag4\">ユーザー名を入力してください</span>\r\n                    <el-input v-model=\"user.username\" placeholder=\"ユーザー名を入力してください\" @blur=\"handleUsername\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"パスワード\">\r\n                    <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag2\">パスワードを入力してください</span>\r\n                    <el-input v-model=\"user.password\" placeholder=\"パスワードを入力してください\" show-password\r\n                        @blur=\"handlePassword\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"ユーザー権限\" :label-width=\"formLabelWidth\">\r\n                    <el-select v-model=\"user.rolesno\" placeholder=\"権限種類\">\r\n                        <el-option label=\"操作者\" value=\"1\"></el-option>\r\n                        <el-option label=\"閲覧者\" value=\"2\"></el-option>\r\n                        <el-option label=\"管理者\" value=\"3\"></el-option>\r\n                        <el-option label=\"システム管理者\" value=\"4\"></el-option>\r\n                    </el-select>\r\n                </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button @click=\"CreateUserVisible = false\">キャンセル</el-button>\r\n                <el-button type=\"primary\" @click=\"createUser\" :disabled=\"!canLogin\">追 加</el-button>\r\n            </div>\r\n        </el-dialog>\r\n\r\n        <el-table :data=\"users\" style=\"width: 100%\">\r\n            <el-table-column prop=\"userid\" label=\"ユーザー番号\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"username\" label=\"ユーザー名\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"rolesno\" label=\"権限\" :formatter=\"userFormatter\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"address\" label=\"操作\">\r\n                <template slot-scope=\"scope\">\r\n                    <button type=\"button\" class=\"el-button el-button--primary el-button--small\"\r\n                        @click=\"editUserbt(scope.row)\">編集</button>\r\n                    <!-- ユーザー編集ダイアログ -->\r\n                    <el-dialog title=\"ユーザー新規\" :visible.sync=\"editUserVisible\" :close-on-click-modal=\"false\"\r\n                        @closed=\"userInit\">\r\n                        <el-form :model=\"user\">\r\n                            <el-form-item label=\"ユーザーID\">\r\n                                <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag1\">ユーザーIDを入力してください</span>\r\n                                <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag3\">ユーザーIDは数字のみ</span>\r\n                                <el-input v-model=\"user.userid\" autocomplete=\"off\" placeholder=\"ユーザーIDを入力してください\"\r\n                                    @blur=\"handUserid\"></el-input>\r\n                            </el-form-item>\r\n                            <el-form-item label=\"ユーザー名\">\r\n                                <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag4\">ユーザー名を入力してください</span>\r\n                                <el-input v-model=\"user.username\" placeholder=\"ユーザー名を入力してください\"\r\n                                    @blur=\"handleUsername\"></el-input>\r\n                            </el-form-item>\r\n                            <el-form-item label=\"パスワード\">\r\n                                <el-input v-model=\"user.password\" placeholder=\"パスワードを編集したい方のみ入力\" show-password\r\n                                    @blur=\"handlePassword\"></el-input>\r\n                            </el-form-item>\r\n                            <el-form-item label=\"ユーザー権限\" :label-width=\"formLabelWidth\">\r\n                                <el-select v-model=\"user.rolesno\" placeholder=\"権限種類\">\r\n                                    <el-option label=\"操作者\" value=\"1\"></el-option>\r\n                                    <el-option label=\"閲覧者\" value=\"2\"></el-option>\r\n                                    <el-option label=\"管理者\" value=\"3\"></el-option>\r\n                                    <el-option label=\"システム管理者\" value=\"4\"></el-option>\r\n                                </el-select>\r\n                            </el-form-item>\r\n                        </el-form>\r\n                        <div slot=\"footer\" class=\"dialog-footer\">\r\n                            <el-button @click=\"editUserVisible = false\">キャンセル</el-button>\r\n                            <el-button type=\"primary\" @click=\"editUser\">完了</el-button>\r\n                        </div>\r\n                    </el-dialog> &nbsp;\r\n                    <button type=\"button\" class=\"el-button el-button--danger el-button--small\"\r\n                        @click=\"deleteUser(scope.row)\">削除</button>\r\n                </template>\r\n\r\n            </el-table-column>\r\n        </el-table>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: 'rolesView',\r\n        data() {\r\n            return {\r\n                CreateUserVisible: false,\r\n                editUserVisible: false,\r\n                //ユーザー新規フォーム\r\n                user: {\r\n                    userid: '',\r\n                    username: '',\r\n                    password: '',\r\n                    rolesno: ''\r\n                },\r\n                formLabelWidth: '100px',\r\n                //サーバーから取得したユーザーデータ\r\n                users: [{\r\n                    userid: '0001',\r\n                    username: '田代 太郎',\r\n                    rolesno: '1'\r\n                }, {\r\n                    userid: '0002',\r\n                    username: '毛賀 次郎',\r\n                    rolesno: '2'\r\n                }, {\r\n                    userid: '0003',\r\n                    username: '埼玉 花子',\r\n                    rolesno: '3'\r\n                }, {\r\n                    userid: '0004',\r\n                    username: '山田 三郎',\r\n                    rolesno: '4'\r\n                }],\r\n                flag1: false,\r\n                flag2: false,\r\n                flag3: false,\r\n                flag4: false,\r\n            }\r\n        },\r\n        computed: {\r\n            canLogin() {\r\n                return !this.flag1 && !this.flag2 && !this.flag3 && !this.flag4 && this.user.userid.length != 0 && this.user.username.length != 0 && this.user.password.length != 0 && this.user.rolesno.length != 0\r\n            }\r\n        },\r\n        created() {\r\n            // this.init()\r\n        },\r\n        methods: {\r\n            // ユーザー編集，user对象的密码可能为空，如果为空就不update密码字段\r\n            editUser() {\r\n                // this.$http\r\n                //     .post(\"/user/editUser\", this.user)\r\n                //     .then(res => {\r\n                //         if (res.data.code == 200) {\r\n                //             this.editUserVisible = false;\r\n                //             this.$message({\r\n                //                 message: 'ユーザー編集成功',\r\n                //                 type: 'success'\r\n                //             });\r\n                //             this.init();\r\n                //         }\r\n                //     })\r\n                this.editUserVisible = false;\r\n                this.$message({\r\n                    message: '編集成功',\r\n                    type: 'success'\r\n                });\r\n            },\r\n            editUserbt(user) {\r\n                this.editUserVisible = true,\r\n                    this.user.userid = user.userid,\r\n                    this.user.username = user.username,\r\n                    this.user.rolesno = user.rolesno\r\n            },\r\n            // ユーザー削除\r\n            deleteUser(user) {\r\n                this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\r\n                    confirmButtonText: '确定',\r\n                    cancelButtonText: '取消',\r\n                    type: 'warning'\r\n                }).then(() => {\r\n                    // this.$http\r\n                    //     .post(\"/user/deleteUser/\" + user.userid)\r\n                    //     .then(res => {\r\n                    //         if (res.data.code == 200) {\r\n                    //             this.$message({\r\n                    //                 message: '削除成功',\r\n                    //                 type: 'success'\r\n                    //             });\r\n                    //             this.init()\r\n                    //         }\r\n                    //     })\r\n                    this.$message({\r\n                        message: '削除成功',\r\n                        type: 'success'\r\n                    });\r\n                })\r\n                    .catch(() => {\r\n                        this.$message({\r\n                            type: 'info',\r\n                            message: '已取消删除'\r\n                        });\r\n                    });\r\n            },\r\n            // ユーザー新規\r\n            createUser() {\r\n                // this.$http\r\n                //     .post(\"/user/createUser\", this.user)\r\n                //     .then(res => {\r\n                //         if (res.data.code == 200) {\r\n                //             this.CreateUserVisible = false;\r\n                //             this.$message({\r\n                //                 message: 'ユーザー新規成功',\r\n                //                 type: 'success'\r\n                //             });\r\n                //             this.init();\r\n                //         }\r\n                //     })\r\n                this.CreateUserVisible = false;\r\n            },\r\n            // ユーザー権限のフォーマット\r\n            userFormatter(row) {\r\n                if (row.rolesno == 1) {\r\n                    return '操作者'\r\n                } else if (row.rolesno == 2) {\r\n                    return '閲覧者'\r\n                } else if (row.rolesno == 3) {\r\n                    return '管理者'\r\n                } else if (row.rolesno == 4) {\r\n                    return 'システム管理者'\r\n                }\r\n            },\r\n            // ユーザーIDのバリデーション\r\n            handUserid() {\r\n                if (this.user.userid == '') {\r\n                    this.flag1 = true\r\n                } else {\r\n                    this.flag1 = false\r\n                }\r\n                if (this.user.userid.length != 0 && !/^[0-9]+$/.test(this.user.userid)) {\r\n                    this.flag3 = true\r\n                } else {\r\n                    this.flag3 = false\r\n                }\r\n            },\r\n            // ユーザー名のバリデーション\r\n            handleUsername() {\r\n                if (this.user.username == '') {\r\n                    this.flag4 = true\r\n                } else {\r\n                    this.flag4 = false\r\n                }\r\n            },\r\n            // パスワードのバリデーション\r\n            handlePassword() {\r\n                if (this.user.password == '') {\r\n                    this.flag2 = true\r\n                } else {\r\n                    this.flag2 = false\r\n                }\r\n            },\r\n            //ユーザー一覧取得、初期化クリア\r\n            init() {\r\n                this.$http\r\n                    .post(\"/user/getUsers\")\r\n                    .then(res => {\r\n                        if (res.data.code == 200) {\r\n                            this.users = res.data.data\r\n                        }\r\n                    })\r\n                this.userInit();\r\n            },\r\n            userInit() {\r\n                this.user.userid = '',\r\n                    this.user.username = '',\r\n                    this.user.password = '',\r\n                    this.user.rolesno = '',\r\n                    this.flag1 = false,\r\n                    this.flag2 = false,\r\n                    this.flag3 = false,\r\n                    this.flag4 = false\r\n\r\n            }\r\n        },\r\n    }\r\n</script>\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}