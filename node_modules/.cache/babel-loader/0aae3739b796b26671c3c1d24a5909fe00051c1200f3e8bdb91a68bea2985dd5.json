{"ast":null,"code":"export default {\n  data() {\n    return {\n      path: '',\n      dialogFormVisible: false,\n      flag1: false,\n      flag2: false,\n      billType: {\n        billType: ''\n      },\n      customer: {\n        customer: '',\n        customerType: ''\n      },\n      customerTypes: [],\n      billTypes: [],\n      customers: []\n    };\n  },\n  name: 'categoryView',\n  computed: {\n\n    // editPathBt(){\n    //     return this.path === ''\n    // }\n  },\n  created() {\n    this.billsInit();\n  },\n  methods: {\n    // \n    deleteBillType(billTypeno) {\n      this.$confirm('これで帳票種類は完全に削除されます，続きますが？', '帳票種類を消しますが？', {\n        confirmButtonText: '続く',\n        cancelButtonText: 'キャンセル',\n        type: 'warning'\n      }).then(() => {\n        this.$http.get('/category/deleteBillType/' + billTypeno).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              type: 'success',\n              message: '削除成功'\n            });\n            this.billsInit();\n          }\n        });\n      }).catch(() => {});\n    },\n    // addBillType() {\n    //     this.$prompt('帳票種類を入力ください', '帳票種類新規', {\n    //         confirmButtonText: '追加',\n    //         cancelButtonText: 'キャンセル',\n    //     }).then(({ value }) => {\n    //         if (value == null || value === '') {\n    //             this.$message({\n    //                 type: 'warning',\n    //                 message: '帳票種類を入力ください'\n    //             });\n    //             return\n    //         }\n    //         this.$http.get('/category/addBillType/' + value)\n    //             .then(res => {\n    //                 if (res.data.code === 200) {\n    //                     this.$message({\n    //                         type: 'success',\n    //                         message: '新規成功'\n    //                     });\n    //                     this.billsInit()\n    //                 }\n    //             })\n    //     }).catch(() => { });\n    // },\n\n    addBillType() {\n      this.$prompt('帳票種類を入力ください', '帳票種類新規', {\n        confirmButtonText: '追加',\n        cancelButtonText: 'キャンセル'\n      }).then(({\n        value\n      }) => {\n        if (value == null || value === '') {\n          this.$message({\n            type: 'warning',\n            message: '帳票種類を入力ください'\n          });\n          return;\n        }\n        const requestData = {\n          billType: {\n            billType: value\n          },\n          createuserid: sessionStorage.getItem('userid')\n        };\n        this.$http.post('/category/addBillType', requestData).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              type: 'success',\n              message: '新規成功'\n            });\n            this.billsInit();\n          }\n        }).catch(error => {\n          console.error('新規请求失败:', error);\n          this.$message({\n            type: 'error',\n            message: '新規请求失败，请重试'\n          });\n        });\n      }).catch(() => {});\n    },\n    handleFolderChange(e) {\n      const path = e.target.files[0].path;\n      this.path = path;\n    },\n    triggerFileInput() {\n      this.$refs.fileInput.click();\n    },\n    billsInit() {\n      this.$http.get('/category/getBillTypes').then(res => {\n        this.billTypes = res.data.data;\n      });\n    },\n    // 编辑帐单类型方法\n    editBillType(billType) {\n      this.$prompt('帳票種類を入力ください', '帳票種類編集', {\n        confirmButtonText: '追加',\n        cancelButtonText: 'キャンセル'\n      }).then(({\n        value\n      }) => {\n        if (value == null || value === '') {\n          this.$message({\n            type: 'warning',\n            message: '帳票種類を入力ください'\n          });\n          return;\n        }\n\n        // \n        const requestData = {\n          billTypeno: billType.billTypeno,\n          billType: value.billType,\n          updateuserid: sessionStorage.getItem('userid')\n        };\n        this.$http.post('/category/editBillType', requestData).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              type: 'success',\n              message: '编辑成功'\n            });\n            this.billsInit();\n          }\n        }).catch(error => {\n          console.error('编辑请求失败:', error);\n          this.$message({\n            type: 'error',\n            message: '编辑请求失败，请重试'\n          });\n        });\n      }).catch(() => {});\n    }\n  }\n};","map":{"version":3,"names":["data","path","dialogFormVisible","flag1","flag2","billType","customer","customerType","customerTypes","billTypes","customers","name","computed","created","billsInit","methods","deleteBillType","billTypeno","$confirm","confirmButtonText","cancelButtonText","type","then","$http","get","res","code","$message","message","catch","addBillType","$prompt","value","requestData","createuserid","sessionStorage","getItem","post","error","console","handleFolderChange","e","target","files","triggerFileInput","$refs","fileInput","click","editBillType","updateuserid"],"sources":["src/views/billStyle.vue"],"sourcesContent":["<template>\n    <div>\n        <el-button type=\"primary\" plain @click=\"addBillType\" style=\"display: flex;\">新規</el-button>\n        <el-table :data=\"billTypes\" style=\"width: 100%\" >\n            <el-table-column\n                prop=\"billTypeno\"\n                label=\"帳票種類编号\"\n                >\n            </el-table-column>\n            <el-table-column\n                prop=\"billType\"\n                label=\"帳票種類\"\n                >\n            </el-table-column>\n            <el-table-column\n                label=\"操作\">\n                <template slot-scope=\"scope\">\n                    <el-button size=\"mini\" type=\"info\" icon=\"el-icon-edit\" @click=\"editBillType(scope.row)\">編集</el-button>\n                    <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"deleteBillType(scope.row.billTypeno)\">削除</el-button>\n                </template>\n            </el-table-column>\n        </el-table>\n    </div>\n\n</template>\n\n\n<script>\nexport default {\n    \n    data() {\n        return {\n            path: '',\n            dialogFormVisible: false,\n            flag1: false,\n            flag2: false,\n            billType: {\n                billType: ''\n            },\n            customer: {\n                customer: '',\n                customerType: ''\n            },\n            customerTypes: [],\n            billTypes: [],\n            customers: []\n        }\n    },\n    name: 'categoryView',\n    computed: {\n        \n        // editPathBt(){\n        //     return this.path === ''\n        // }\n    },\n    created() {\n        this.billsInit()\n    \n    },\n    methods: {\n        // \n        deleteBillType(billTypeno) {\n            this.$confirm('これで帳票種類は完全に削除されます，続きますが？', '帳票種類を消しますが？', {\n                confirmButtonText: '続く',\n                cancelButtonText: 'キャンセル',\n                type: 'warning'\n            }).then(() => {\n                this.$http.get('/category/deleteBillType/' + billTypeno)\n                    .then(res => {\n                        if (res.data.code === 200) {\n                            this.$message({\n                                type: 'success',\n                                message: '削除成功'\n                            });\n                            this.billsInit()\n                        }\n                    })\n            }).catch(() => { });\n        },\n        // addBillType() {\n        //     this.$prompt('帳票種類を入力ください', '帳票種類新規', {\n        //         confirmButtonText: '追加',\n        //         cancelButtonText: 'キャンセル',\n        //     }).then(({ value }) => {\n        //         if (value == null || value === '') {\n        //             this.$message({\n        //                 type: 'warning',\n        //                 message: '帳票種類を入力ください'\n        //             });\n        //             return\n        //         }\n        //         this.$http.get('/category/addBillType/' + value)\n        //             .then(res => {\n        //                 if (res.data.code === 200) {\n        //                     this.$message({\n        //                         type: 'success',\n        //                         message: '新規成功'\n        //                     });\n        //                     this.billsInit()\n        //                 }\n        //             })\n        //     }).catch(() => { });\n        // },\n\n        addBillType() {\n            this.$prompt('帳票種類を入力ください', '帳票種類新規', {\n                confirmButtonText: '追加',\n                cancelButtonText: 'キャンセル',\n            }).then(({ value }) => {\n                if (value == null || value === '') {\n                    this.$message({\n                        type: 'warning',\n                        message: '帳票種類を入力ください'\n                    });\n                    return;\n                }\n\n                const requestData = {\n                    billType: {\n                        billType: value\n                    },\n                    createuserid: sessionStorage.getItem('userid')\n                };\n\n                this.$http.post('/category/addBillType', requestData)\n                    .then(res => {\n                        if (res.data.code === 200) {\n                            this.$message({\n                                type: 'success',\n                                message: '新規成功'\n                            });\n                            this.billsInit();\n                        }\n                    })\n                    .catch(error => {\n                        console.error('新規请求失败:', error);\n                        this.$message({\n                            type: 'error',\n                            message: '新規请求失败，请重试'\n                        });\n                    });\n            }).catch(() => {});\n        },\n\n\n\n        handleFolderChange(e) {\n            const path = e.target.files[0].path\n            this.path = path\n        },\n        triggerFileInput() {\n            this.$refs.fileInput.click();\n        },\n        billsInit() {\n            this.$http.get('/category/getBillTypes')\n                .then(res => {\n                    this.billTypes = res.data.data\n                })\n        },\n       \n        // 编辑帐单类型方法\n        editBillType(billType) {\n            this.$prompt('帳票種類を入力ください', '帳票種類編集', {\n                confirmButtonText: '追加',\n                cancelButtonText: 'キャンセル',\n            }).then(({ value }) => {\n                if (value == null || value === '') {\n                    this.$message({\n                        type: 'warning',\n                        message: '帳票種類を入力ください'\n                    });\n                    return;\n                }\n\n                // \n                const requestData = {\n                    billTypeno: billType.billTypeno,\n                    billType: value.billType,\n                    updateuserid: sessionStorage.getItem('userid')\n\n                };\n\n                this.$http.post('/category/editBillType', requestData)\n                    .then(res => {\n                        if (res.data.code === 200) {\n                            this.$message({\n                                type: 'success',\n                                message: '编辑成功'\n                            });\n                            this.billsInit();\n                        }\n                    })\n                    .catch(error => {\n                        \n                        console.error('编辑请求失败:', error);\n                        this.$message({\n                            type: 'error',\n                            message: '编辑请求失败，请重试'\n                        });\n                    });\n            }).catch(() => {\n                \n            });\n        }\n    \n\n    }\n    \n}\n</script>\n\n<style>\n  .el-table .warning-row {\n    background: oldlace;\n  }\n\n  .el-table .success-row {\n    background: #f0f9eb;\n  }\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}