{"ast":null,"code":"export default {\n  data() {\n    return {\n      path: '',\n      dialogFormVisible: false,\n      flag1: false,\n      flag2: false,\n      billType: {\n        billType: ''\n      },\n      customer: {\n        customer: '',\n        customerType: ''\n      },\n      customerTypes: [],\n      billTypes: [],\n      customers: []\n    };\n  },\n  name: 'categoryView',\n  computed: {\n    addCustomerBt() {\n      return this.customer.customer === '' || this.customer.customerType === '';\n    }\n    // editPathBt(){\n    //     return this.path === ''\n    // }\n  },\n\n  created() {\n    // this.billsInit()\n    this.costumersInit();\n    this.customerTypesInit();\n  },\n  methods: {\n    // editPath(){\n\n    // },\n    costumersInit() {\n      this.$http.get('/category/getCustomers').then(res => {\n        this.customers = res.data.data;\n      });\n    },\n    customerTypesInit() {\n      this.$http.get('/category/getCustomerTypes').then(res => {\n        this.customerTypes = res.data.data;\n      });\n    },\n    customerBlur() {\n      if (this.customer.customer === '') {\n        this.flag1 = true;\n      } else {\n        this.flag1 = false;\n      }\n    },\n    deleteCustomer(customerno) {\n      this.$confirm('これで取引先は完全に削除されます，続きますが？', '取引先を消しますが？', {\n        confirmButtonText: '続く',\n        cancelButtonText: 'キャンセル',\n        type: 'warning'\n      }).then(() => {\n        this.$http.get('/category/deleteCustomer/' + customerno).then(res => {\n          if (res.data.code === 200) {\n            this.$message({\n              type: 'success',\n              message: '削除成功'\n            });\n            this.customerInit();\n          }\n        });\n      }).catch(() => {});\n    },\n    addCustomer() {\n      let flag1 = false;\n      this.customerTypes.forEach(customer => {\n        if (this.customer.customerType === customer.customerType) {\n          flag1 = true;\n        }\n      });\n      if (!flag1) {\n        this.$confirm('入力した取引先は今のない取引先です。', '取引先を新規しますか？', {\n          confirmButtonText: '新規',\n          cancelButtonText: 'キャンセル',\n          type: 'warning'\n        }).then(() => {\n          this.addCustomerSend();\n        });\n      } else {\n        this.addCustomerSend();\n      }\n    },\n    addCustomerSend() {\n      this.$http.post('/category/addCustomer', this.customer).then(res => {\n        if (res.data.code === 200) {\n          this.$message({\n            type: 'success',\n            message: '新規成功'\n          });\n          this.costomersInit();\n          this.costomerInit();\n        }\n      });\n      this.dialogFormVisible = false;\n    },\n    costomersInit() {\n      this.$http.get('/category/getCustomers').then(res => {\n        this.customers = res.data.data;\n      });\n    },\n    customerInit() {\n      this.customer.customer = '', this.customer.customerType = '';\n    }\n    // billsInit() {\n    //     this.$http.get('/category/getBillTypes')\n    //         .then(res => {\n    //             this.billTypes = res.data.data\n    //         })\n    // },\n  }\n};","map":{"version":3,"names":["data","path","dialogFormVisible","flag1","flag2","billType","customer","customerType","customerTypes","billTypes","customers","name","computed","addCustomerBt","created","costumersInit","customerTypesInit","methods","$http","get","then","res","customerBlur","deleteCustomer","customerno","$confirm","confirmButtonText","cancelButtonText","type","code","$message","message","customerInit","catch","addCustomer","forEach","addCustomerSend","post","costomersInit","costomerInit"],"sources":["src/views/customer.vue"],"sourcesContent":["<template>\n   <div>\n    <el-button type=\"primary\" plain @click=\"dialogFormVisible= true\" style=\"display: flex;\">新規</el-button>\n    <el-table :data=\"customers\" style=\"width: 100%\">\n      <el-table-column label=\"取引先\" prop=\"customer\"></el-table-column>\n      <el-table-column label=\"取引先種類\" prop=\"customerType\"></el-table-column>\n      <el-table-column label=\"TEL\" prop=\"phoneNumber\"></el-table-column>\n      <el-table-column label=\"アドレス\" prop=\"address\"></el-table-column>\n      <el-table-column label=\"法人番号\" prop=\"legalEntityNumber\"></el-table-column>\n      <el-table-column label=\"操作\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\" type=\"info\" icon=\"el-icon-edit\" @click=\"editCustomer(scope.row)\">編集</el-button>\n          <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"deleteCustomer(scope.row.customerno)\">削除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- Dialog form for adding/editing customer -->\n    <el-dialog title=\"取引先新規\" :visible.sync=\"dialogFormVisible\" @closed=\"customerInit\">\n      <el-form :model=\"customer\">\n        <el-form-item label=\"取引先\">\n          <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag1\">取引先を入力してください</span>\n          <el-input v-model=\"customer.customer\" autocomplete=\"off\" @blur=\"customerBlur\"></el-input>\n        </el-form-item> \n        <el-form-item label=\"取引先種類\">\n          <span class=\"text-danger\" style=\"font-size: 12px;\" v-if=\"flag2\">取引先種類を入力してください</span>\n          <el-select v-model=\"customer.customerType\" filterable allow-create default-first-option class=\"w-100\" placeholder=\"取引先種類を選択してください\">\n            <el-option v-for=\"customerType in customerTypes\" :key=\"customerType.customerType\" :label=\"customerType.customerType\" :value=\"customerType.customerType\"></el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">キャンセル</el-button>\n        <el-button type=\"primary\" @click=\"addCustomer\" :disabled=\"addCustomerBt\">追 加</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n<!--  -->\n<script>\n  export default {\n        data() {\n            return {\n                path: '',\n                dialogFormVisible: false,\n                flag1: false,\n                flag2: false,\n                billType: {\n                    billType: ''\n                },\n                customer: {\n                    customer: '',\n                    customerType: ''\n                },\n                customerTypes: [],\n                billTypes: [],\n                customers: []\n            }\n        },\n        name: 'categoryView',\n        computed: {\n            addCustomerBt() {\n                return this.customer.customer === '' || this.customer.customerType === ''\n            },\n            // editPathBt(){\n            //     return this.path === ''\n            // }\n        },\n        created() {\n            // this.billsInit()\n            this.costumersInit()\n            this.customerTypesInit()\n        },\n        methods: {\n            // editPath(){\n\n            // },\n            costumersInit() {\n                this.$http.get('/category/getCustomers')\n                    .then(res => {\n                        this.customers = res.data.data\n                    })\n            },\n            customerTypesInit() {\n                this.$http.get('/category/getCustomerTypes')\n                    .then(res => {\n                        this.customerTypes = res.data.data\n                    })\n            },\n            customerBlur() {\n                if (this.customer.customer === '') {\n                    this.flag1 = true\n                } else {\n                    this.flag1 = false\n                }\n            },\n            deleteCustomer(customerno) {\n                this.$confirm('これで取引先は完全に削除されます，続きますが？', '取引先を消しますが？', {\n                    confirmButtonText: '続く',\n                    cancelButtonText: 'キャンセル',\n                    type: 'warning'\n                }).then(() => {\n                    this.$http.get('/category/deleteCustomer/' + customerno)\n                        .then(res => {\n                            if (res.data.code === 200) {\n                                this.$message({\n                                    type: 'success',\n                                    message: '削除成功'\n                                });\n                                this.customerInit()\n                            }\n                        })\n                }).catch(() => { });\n            },\n\n            addCustomer() {\n                let flag1 = false;\n                this.customerTypes.forEach(customer => {\n                    if (this.customer.customerType === customer.customerType) {\n                        flag1 = true\n                    }\n                });\n                if (!flag1) {\n                    this.$confirm('入力した取引先は今のない取引先です。', '取引先を新規しますか？', {\n                        confirmButtonText: '新規',\n                        cancelButtonText: 'キャンセル',\n                        type: 'warning'\n                    }).then(() => {\n                        this.addCustomerSend()\n                    })\n                } else {\n                    this.addCustomerSend()\n                }\n            },\n            addCustomerSend() {\n                this.$http.post('/category/addCustomer', this.customer)\n                    .then(res => {\n                        if (res.data.code === 200) {\n                            this.$message({\n                                type: 'success',\n                                message: '新規成功'\n                            });\n                            this.costomersInit()\n                            this.costomerInit()\n                        }\n                    })\n                this.dialogFormVisible = false\n            },\n            \n            costomersInit() {\n                this.$http.get('/category/getCustomers')\n                    .then(res => {\n                        this.customers = res.data.data\n                    })\n            },\n            customerInit() {\n                this.customer.customer = '',\n                    this.customer.customerType = ''\n            },\n            // billsInit() {\n            //     this.$http.get('/category/getBillTypes')\n            //         .then(res => {\n            //             this.billTypes = res.data.data\n            //         })\n            // },\n\n        }\n    }\n</script>\n<!--  -->\n<style>\n  .el-table .warning-row {\n    background: oldlace;\n  }\n\n  .el-table .success-row {\n    background: #f0f9eb;\n  }\n</style>"],"mappings":"AAwCA;EACAA,KAAA;IACA;MACAC,IAAA;MACAC,iBAAA;MACAC,KAAA;MACAC,KAAA;MACAC,QAAA;QACAA,QAAA;MACA;MACAC,QAAA;QACAA,QAAA;QACAC,YAAA;MACA;MACAC,aAAA;MACAC,SAAA;MACAC,SAAA;IACA;EACA;EACAC,IAAA;EACAC,QAAA;IACAC,cAAA;MACA,YAAAP,QAAA,CAAAA,QAAA,gBAAAA,QAAA,CAAAC,YAAA;IACA;IACA;IACA;IACA;EACA;;EACAO,QAAA;IACA;IACA,KAAAC,aAAA;IACA,KAAAC,iBAAA;EACA;EACAC,OAAA;IACA;;IAEA;IACAF,cAAA;MACA,KAAAG,KAAA,CAAAC,GAAA,2BACAC,IAAA,CAAAC,GAAA;QACA,KAAAX,SAAA,GAAAW,GAAA,CAAArB,IAAA,CAAAA,IAAA;MACA;IACA;IACAgB,kBAAA;MACA,KAAAE,KAAA,CAAAC,GAAA,+BACAC,IAAA,CAAAC,GAAA;QACA,KAAAb,aAAA,GAAAa,GAAA,CAAArB,IAAA,CAAAA,IAAA;MACA;IACA;IACAsB,aAAA;MACA,SAAAhB,QAAA,CAAAA,QAAA;QACA,KAAAH,KAAA;MACA;QACA,KAAAA,KAAA;MACA;IACA;IACAoB,eAAAC,UAAA;MACA,KAAAC,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,IAAA;MACA,GAAAR,IAAA;QACA,KAAAF,KAAA,CAAAC,GAAA,+BAAAK,UAAA,EACAJ,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAArB,IAAA,CAAA6B,IAAA;YACA,KAAAC,QAAA;cACAF,IAAA;cACAG,OAAA;YACA;YACA,KAAAC,YAAA;UACA;QACA;MACA,GAAAC,KAAA;IACA;IAEAC,YAAA;MACA,IAAA/B,KAAA;MACA,KAAAK,aAAA,CAAA2B,OAAA,CAAA7B,QAAA;QACA,SAAAA,QAAA,CAAAC,YAAA,KAAAD,QAAA,CAAAC,YAAA;UACAJ,KAAA;QACA;MACA;MACA,KAAAA,KAAA;QACA,KAAAsB,QAAA;UACAC,iBAAA;UACAC,gBAAA;UACAC,IAAA;QACA,GAAAR,IAAA;UACA,KAAAgB,eAAA;QACA;MACA;QACA,KAAAA,eAAA;MACA;IACA;IACAA,gBAAA;MACA,KAAAlB,KAAA,CAAAmB,IAAA,+BAAA/B,QAAA,EACAc,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAArB,IAAA,CAAA6B,IAAA;UACA,KAAAC,QAAA;YACAF,IAAA;YACAG,OAAA;UACA;UACA,KAAAO,aAAA;UACA,KAAAC,YAAA;QACA;MACA;MACA,KAAArC,iBAAA;IACA;IAEAoC,cAAA;MACA,KAAApB,KAAA,CAAAC,GAAA,2BACAC,IAAA,CAAAC,GAAA;QACA,KAAAX,SAAA,GAAAW,GAAA,CAAArB,IAAA,CAAAA,IAAA;MACA;IACA;IACAgC,aAAA;MACA,KAAA1B,QAAA,CAAAA,QAAA,OACA,KAAAA,QAAA,CAAAC,YAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}